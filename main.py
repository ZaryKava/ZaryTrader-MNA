import os # –î–û–î–ê–ù–û –¶–ï–ô –Ü–ú–ü–û–†–¢
import logging
import feedparser
import asyncio # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π

# –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è python-telegram-bot
from telegram import Bot
from telegram.ext import Application, ApplicationBuilder, ContextTypes
from telegram.constants import ParseMode

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logging.getLogger("httpx").setLevel(logging.WARNING) # –ó–º–µ–Ω—à–∏—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è httpx
logging.getLogger("telegram.ext").setLevel(logging.INFO) # –ó–º–µ–Ω—à–∏—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è telegram.ext

# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –ë–û–¢–ê ---
# –¢–æ–∫–µ–Ω –æ—Ç—Ä–∏–º—É—î—Ç—å—Å—è –∑ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è (Secrets –Ω–∞ Replit, Environment Variables –Ω–∞ Render)
TOKEN = os.environ.get("TOKEN") # –¢–ï–ü–ï–† –ü–†–ê–í–ò–õ–¨–ù–û –ß–ò–¢–ê–Ñ –¢–û–ö–ï–ù –ó–Ü –ó–ú–Ü–ù–ù–ò–• –û–¢–û–ß–ï–ù–ù–Ø
# –í–∞—à ID —á–∞—Ç—É. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—ñ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π (–¥–ª—è –≥—Ä—É–ø–∏ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–∏–º)
CHAT_ID = "475384360" # <<<<<<<< –ü–ï–†–ï–í–Ü–†–¢–ï –¢–ê –í–ò–ü–†–ê–í–¢–ï –¶–ï–ô CHAT_ID, –Ø–ö–©–û –í–Ü–ù –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ò–ô!

# –°–ø–∏—Å–æ–∫ RSS-—Å—Ç—Ä—ñ—á–æ–∫
FEEDS = [
    "https://www.forexlive.com/feed/",
    "https://www.investing.com/rss/news.rss",
    "https://www.fxstreet.com/rss",
    "https://www.forexfactory.com/calendar.php?week=thisweek&format=rss",
]

# –ù–∞–±—ñ—Ä –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å
seen_links = set()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω
async def fetch_news_job(context: ContextTypes.DEFAULT_TYPE):
    logging.info("–ü–æ—á–∏–Ω–∞—é –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–æ–≤–∏–Ω...")
    bot = context.bot # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç –±–æ—Ç–∞ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É

    for url in FEEDS:
        logging.info(f"–ù–∞–º–∞–≥–∞—é—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä—ñ—á–∫—É –∑: {url}")
        try:
            feed = feedparser.parse(url)
            if not feed.entries:
                logging.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤ —É —Å—Ç—Ä—ñ—á—Ü—ñ –∑ {url}. –ú–æ–∂–ª–∏–≤–æ, —Å—Ç—Ä—ñ—á–∫–∞ –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                continue

            for entry in feed.entries[:5]: # –û–±–º–µ–∂—É—î–º–æ –¥–æ 5 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Å–ø–∞–º—É –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
                entry_title = getattr(entry, 'title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
                entry_link = getattr(entry, 'link', '–ë–µ–∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è')

                if entry_link == '–ë–µ–∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è':
                    logging.warning(f"–ó–∞–ø–∏—Å '{entry_title}' –∑ {url} –Ω–µ –º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –ü—Ä–æ–ø—É—Å–∫–∞—é —Ü–µ–π –∑–∞–ø–∏—Å.")
                    continue

                if entry_link not in seen_links:
                    seen_links.add(entry_link)
                    text = f"üì∞ <b>{entry_title}</b>\n{entry_link}"
                    logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: '{entry_link}'. –ù–∞–º–∞–≥–∞—é—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ CHAT_ID: {CHAT_ID}...")
                    try:
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ CHAT_ID –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
                        if not CHAT_ID:
                            logging.error("CHAT_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π! –ù–µ –º–æ–∂—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
                            continue
                        await bot.send_message(chat_id=CHAT_ID, text=text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
                        logging.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–ª—è '{entry_title}'.")
                    except Exception as e:
                        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è '{entry_title}' –¥–æ CHAT_ID {CHAT_ID}: {e}", exc_info=True)
                        if "chat not found" in str(e).lower() or "bot was blocked by the user" in str(e).lower() or "not a member" in str(e).lower():
                            logging.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π CHAT_ID –∞–±–æ –±–æ—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π/–Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ CHAT_ID: {CHAT_ID}")
                else:
                    logging.debug(f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è '{entry_link}' –∑—ñ —Å—Ç—Ä—ñ—á–∫–∏ {url} –≤–∂–µ –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—é —Ü–µ–π –∑–∞–ø–∏—Å.")
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ –∞–±–æ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ URL —Å—Ç—Ä—ñ—á–∫–∏ {url}: {e}", exc_info=True)
    logging.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–æ–≤–∏–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

# --- –û—Å–Ω–æ–≤–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ —Ç–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ ---
async def main():
    # –í–∞–∂–ª–∏–≤–æ: TOKEN –º–∞—î –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è Replit/Render.
    if not TOKEN:
        logging.critical("TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å TOKEN —è–∫ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è.")
        return

    logging.info("Application started. Setting up bot and scheduler.")

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Application –¥–ª—è Telegram –±–æ—Ç–∞
    application = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–¥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ job_queue
    job_queue = application.job_queue
    # –ó–∞–ø—É—Å–∫–∞—Ç–∏ fetch_news_job –∫–æ–∂–Ω—ñ 60 —Å–µ–∫—É–Ω–¥ (1 —Ö–≤), –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    job_queue.run_repeating(fetch_news_job, interval=60, first=5)
    logging.info("fetch_news_job –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∑–∞–ø—É—Å–∫ –∫–æ–∂–Ω—É 1 —Ö–≤–∏–ª–∏–Ω—É.")

    try:
        logging.info("–ó–∞–ø—É—Å–∫–∞—é Telegram bot polling...")
        await application.run_polling()
        logging.info("Telegram bot polling –∑–∞–ø—É—â–µ–Ω–æ.")
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (KeyboardInterrupt).")
    except Exception as e:
        logging.critical(f"–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ –±–æ—Ç–∞: {e}", exc_info=True)
    finally:
        logging.info("–ó–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –≤–∏–º–∏–∫–∞—î—Ç—å—Å—è.")

# –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ—ó –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
if __name__ == '__main__':
    asyncio.run(main())
